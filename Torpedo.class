import processing.core.PApplet;

public class Torpedo {

	private float xPos;
	private float yPos;
	private float xDir;
	private float yDir;
	private float speed;
	private float diameter;
	
	
	float red;
	float green;
	float blue;
	private float stroke;
	
	//AsteroidsGameMain heck = new AsteroidsGameMain();
	
	public Torpedo(float xPos, float yPos, float xDir, float yDir, float speed, float diameter) {
		this.xPos = xPos;
		this.yPos = yPos;
		this.xDir = xDir;
		this.yDir = yDir;
		this.speed = speed;
		this.diameter = diameter;
		this.stroke = 255;
	}
	
	public void display(PApplet mainProc){
		mainProc.stroke(stroke);
		mainProc.fill(red, green, blue);
		mainProc.ellipse(xPos, yPos, diameter, diameter);
	}
	
	public void update(){
		xPos = xPos + (speed*xDir);
		yPos = yPos + (speed*yDir);
		setElpXPos(xPos);
		setElpYPos(yPos);
		//heck.remove();
	}
	
	public void shoot(float cosAngle, float sinAngle) {
		xPos = xPos + speed*cosAngle;
		yPos = yPos - speed*sinAngle;
		
	}
	
	public boolean collision(float astXPos, float astYPos){
		float distance;
		distance = PApplet.dist(astXPos, astYPos, xPos, yPos);
		if (distance>30||distance<0){
			return false;
		}
		else{
			return true;
		}
		
	}
	
	public boolean checkBounds() {
		if ((xPos<0||xPos>1000)||(yPos<0||yPos>800)) {
			return false;
		}
		else {
			return true;
		}
	}
	
	public void setElpXPos(float xPos){
		this.xPos=xPos;
	}
	public void setElpYPos(float yPos){
		this.yPos=yPos;
	}
	
	public float getElpXPos(){
		return xPos;
	}
	
	public float getElpYPos(){
		return xPos;
	}
	
	
	
	public void colorChange(int numHits) {//add text about score per color
		if(numHits>=0&&numHits<5||numHits==35) { 
			//numHits+=1;
			red = numHits*50;
		
		}
		
		if(numHits>=5&&numHits<10) {
			red=250;
			numHits=numHits%5;
		
			green = numHits*50;
		}
		if(numHits>=10&&numHits<15) {
			green=250;
			numHits=numHits%5;
			red=250;
			red=red-numHits*50;
		}
		if(numHits>=15&&numHits<20) {
			red=0;
			green=250;
			numHits=numHits%5;
			blue=numHits*50;
		}
		if(numHits>=20&&numHits<25) {
			red=0;
			blue=250;
			numHits=numHits%5;
			green = 250;
			green = green-numHits*50;
		}
		if(numHits>=25&&numHits<30) {
			blue = 250;
			numHits=numHits%5;
			red=numHits*50;
		}
		if(numHits>=30&&numHits<35) {
			red=250;
			numHits=numHits%5;
			blue=250;
			blue=blue-numHits*50;
		}
		if(numHits==999) {
			red=0;
			green=0;
			blue=0;
			this.stroke=0;
		}

	}
	
	
}
